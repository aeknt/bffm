#!/bin/bash
bffm_version="0.3.3"

source buffermaker
## Example of buffermaker tui program

file_faces=(
	dir "$(:weight bold :foreground blue)"
	exec "$(:weight bold :foreground green)"
	symlink "$(:weight bold :foreground cyan)"
	unreadable "$(:foreground gray)"
	char "$(:weight bold :background black :foreground yellow)"
	socket "$(:weight bold :foreground magenta)"

	image "$(:weight bold :foreground magenta)"
	video "$(:weight bold :foreground light-magenta)"
	audio "$(:foreground cyan)"
	archive "$(:weight bold :foreground )"
	text "$(:weight bold :foreground light-magenta)"
	
	info-line "$(:mode inverse :foreground red)"
	info-line-title "$(:mode inverse :foreground light-red)"
	status-line "$(:mode inverse :foreground red)"
	file-focus "$(:mode inverse :foreground red)"
	file-select "$(:mode inverse :foreground light-red)"

	dialog "$(:mode inverse :foreground red)"
)
load-theme file_faces

add-mode dialog
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: 'RET' link-enter
	:: "$(kbd C-c)" 'die'
	mode-options
		:: else :
		:: disable-global 1

# dialog buffer
declare-buffer dialog
	:: line 1
	:: column 0
	:: mode dialog
	:: syntax syntax-format
	:: syntax-exec 1
	:: render-type per-char
	:: size-y 1

add-mode bffm
	:: '[up]' previous-line
	:: '[down]' next-line
	:: '[left]' dir-up
	:: '[right]' open
	:: 'RET' open
	:: '[next]' 'scroll-down'
	:: '[prior]' 'scroll-up'
	:: "$(kbd C-c)" 'die'
	:: "$(kbd h)" toggle-hidden
	:: "$(kbd d)" remove
	:: "$(kbd a)" set-dir
	:: "$(kbd p)" pinned
	:: "$(kbd i)" file-info
	mode-options
		:: else return
		:: disable-global 1
		
# file list buffer
declare-buffer files
bf_d+=(
	[line]=1
	[column]=0
	[mode]=bffm
	[syntax]=syntax-bffm
)
bf_h=(
	[pre-move]='print-buffer-line'
	[redraw.cursor pre-redraw]='redraw-info'
	[redraw.cursor post-redraw]='highlight-selected'
)

add-mode pinned
	:: '[up]' previous-line
	:: '[down]' next-line
	:: '[right]' return-file
	:: 'RET' pinned-select
	:: '[next]' 'scroll-down'
	:: '[prior]' 'scroll-up'
	:: "$(kbd C-c)" 'die'
	mode-options
		:: else return
		:: disable-global 1
	
# pinned list buffer
declare-buffer pinned
	:: line 1
	:: column 0
	:: mode pinned
	:: syntax syntax-bffm
	:: loc-x 1

[ -f "${HOME}/.config/user-dirs.dirs" ] && source "${HOME}/.config/user-dirs.dirs"
buffer=(
	''
	'/'
	"$HOME"
	"$XDG_DESKTOP_DIR"
	"$XDG_DOCUMENTS_DIR"
	"$XDG_DOWNLOAD_DIR"
	"$XDG_MUSIC_DIR"
	"$XDG_PICTURES_DIR"
	"$XDG_TEMPLATES_DIR"
	"$XDG_VIDEOS_DIR"
	"/mnt"
	"/etc"
	"/usr"
	"/media"
)


# status bar buffer
declare-buffer status
	:: line 1
	:: column 0
	:: mode empty
	:: syntax syntax-status
	:: size-y 1
	:: loc-x 1
	:: loc-y 1

buffer=(
	''
	"$PWD"
)

add-mode info
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: 'RET' link-enter
	:: "$(kbd n)" 'info-next'
	:: "$(kbd p)" 'info-previous'
	:: "$(kbd q)" 'info-quit'
	:: "$(kbd C-c)" 'die'
	mode-options
		:: else :
		:: disable-global 1

# file info buffer
declare-buffer info
	:: line 1
	:: column 0
	:: mode info
	:: syntax syntax-format
	:: syntax-exec 1
	:: render-type per-char


function file-info {
	local file="${buffer[bf_d[line]]}"
	set-buffer info
	clear-buffer
	get-file-info "$file"
	redraw
	obj quit
}
function get-file-info {
	buffer=(
		''
'<o> id: next select: info-next up: : left: : right: obj previous text: <f> button <f> link N </f-> ext </f> </o> '\
'<o> id: previous select: info-previous up: : left: obj next right: obj quit text: <f> button <f> link P </f-> revious </f> </o> '\
'<o> id: quit select: info-quit up: : left: obj previous right: : text: <f> button <f> link Q </f-> uit </f> </o>'
		''
		"<f> title $1 </f>"
		''
		"<-> $(file -b "$1")"
		''
		"size <f> title $(du -h "$1" | cut -f1) </f>"
	)
	[ -f "$file" ] &&
		buffer+=("lines <f> title $(wc -l < "$1") </f> words <f> title $(wc -w < "$1") </f> chars <f> title $(wc -m < "$1") </f>")
	buffer+=(
		"owner <f> title $(stat -c %U "$1") </f> (group <f> title $(stat -c %G "$1") <-f> default ) </f> </f>"
		"permissions <f> title $(stat -c %A "$1") </f>"
		''
		"created at $(stat -c %w "$1")"
		"last access at $(stat -c %x "$1")"
		"last modifiction $(stat -c %y "$1")"
		"last status change $(stat -c %z "$1")"
		''
	)
	[ -b "$1" ] && buffer+=("<f> dim block special </f>")
	[ -c "$1" ] && buffer+=("<f> dim char special </f>")
	[ -e "$1" ] && buffer+=("<f> dim exists </f>")
	[ -d "$1" ] && buffer+=("<f> dim dir </f>")
	[ -f "$1" ] && buffer+=("<f> dim regular </f>")
	[ -g "$1" ] && buffer+=("<f> dim set-group-ID </f>")
	[ -G "$1" ] && buffer+=("<f> dim owner by effective group-ID </f>")
	[ -L "$1" ] && buffer+=("<f> dim symlink")
	[ -k "$1" ] && buffer+=("<f> dim sticky")
	[ -O "$1" ] && buffer+=("<f> dim owned by effective user-id </f>")
	[ -p "$1" ] && buffer+=("<f> dim named pipe </f>")
	[ -r "$1" ] && buffer+=("<f> dim read permission </f>")
	[ -s "$1" ] && buffer+=("<f> dim size greater 0 </f>")
	[ -S "$1" ] && buffer+=("<f> dim socket </f>")
	[ -u "$1" ] && buffer+=("<f> dim set-user-ID </f>")
	[ -w "$1" ] && buffer+=("<f> dim write permission granted </f>")
	[ -x "$1" ] && buffer+=("<f> dim execute/search granted </f>")
	
}
function info-next {
	set-buffer files
	next-file
	file-info
}
function info-previous {
	set-buffer files
	previous-file
	file-info
}
function info-quit {
	set-buffer files
	redraw
}


function syntax-status {
	set-face status-line
}

function set-dir {
	local dir
	stty echo
	read-command ': ' dir "$PWD"
	stty -echo
	display-dir "$dir"
}

function display-dir {
	IFS=$'\n'
	clear-buffer
	cd "$1" || cd .
	set-buffer status
	buffer[1]="$PWD"
	unset bf_s[1]
 	redraw
	set-buffer files
	mapfile -t -O 1 buffer <<< "$(list-directory)"
	[ -z "${buffer[bf_d[line]]}" ] && bf_d[line]=1
	redraw
}

# stolen from fff
get-mime-type() {
	# Get a file's mime_type.
	mime_type=$(file "-${file_flags:-biL}" "$1" 2>/dev/null)
}
function open {
	file="${buffer[bf_d[line]]}"
	# Open directories and files.
	if [[ -d "$file" ]]; then
		display-dir "$file"; return;
	elif [[ -f "$file" ]]; then
		# Figure out what kind of file we're working with.
		get-mime-type "$file"

		# Open all text-based files in '$EDITOR'.
		# Everything else goes through 'xdg-open'/'open'.
		case "$mime_type" in
			text/*|*x-empty*|*json*)
				clear-screen
				stty echo
				"${VISUAL:-${EDITOR:-vi}}" "$file"
				stty -echo
				set-buffer status; redraw
				set-buffer pinned; redraw
				set-buffer files; redraw
				;;

			*)
				# 'nohup':  Make the process immune to hangups.
				# '&':      Send it to the background.
				# 'disown': Detach it from the shell.
				nohup "${options[opener]:-${opener:-xdg-open}}" "$file" &>/dev/null &
				disown
		esac
	fi
}


function dir-up {
	display-dir ..
}

function toggle-hidden {
	((hidden==0)) && hidden=1 || hidden=0
	display-dir
}

function highlight-selected {
	printf "%b%s" "${faces[file-focus]}" "${buffer[bf_d[line]]}"
	redraw-line.cursor
	printf '\e[?25l'
}

function redraw-info {
	local file="${buffer[bf_d[line]]}"
	local -i total=${#buffer[@]}
	local -i index=${bf_d[line]}
	local size
	[ -f "$file" ] && size="$(du -h "$file" | cut -f1)"
	[ -d "$file" ] && size="/($(cd "$file" 2> /dev/null && list-directory | wc -l))"

	# WHY THE FUCK DOES THIS ERROR WITH INVALID NUMBER IF PUT TOGETHER AS ONE PRINTF??????????????
	# no seriously whyyyyyy
	printf '\e[%d;%dH'\
		   $LINES\
		   0
	printf '%b%*s\r'\
		   "${faces[info-line]}"\
		   $COLUMNS\
		   ''
	printf '%s %b%s%b %s\e[m'\
		   "${index}/${total}"\
		   "${faces[info-line-title]}"\
		   "$file"\
		   "${faces[info-line]}"\
		   "$size"
}

function syntax-bffm {
	set-face default
	[ -x "$word" ] && set-face exec
	[ -d "$word" ] && set-face dir
	[ -L "$word" ] && set-face symlink
	[ -c "$word" ] && set-face char
	[ -S "$word" ] && set-face socket
	case "$word" in
		*'.png'|*'.jpg') set-face image;;
		*'.mp4'|*'.avi'|*.'mkv'|*'.m4v') set-face video;;
		*'.mp3'|*'.ogg'|*.'wav') set-face audio;;
		*'.zip'|*'.tar'|*'.rar') set-face archive;;
		*'.txt'|*'.md') set-face text;;
	esac
}

function dialog {
	((tmpx=bf_d[column] + bf_d[loc-x],
	  tmpy=bf_d[line] + bf_d[loc-y] - 1))
	set-buffer dialog
	clear-buffer
	((bf_d[loc-x]=tmpx,
	  bf_d[loc-y]=tmpy,
	  bf_d[size-x]=${#1} + ${#2} + 5 + 4,
	  bf_d[column]=0
	))
	
	buffer[0]=''
	buffer[1]="<f> file-select $1 </f> "
	buffer[1]+="<-f> dialog  $2 "
	buffer[1]+="<o> id: yes select: $3 up: : down: : left: obj no right: obj return "
	buffer[1]+='text: Yes </o> '
	buffer[1]+='<o> id: return select: dialog-return up: : down: : left: obj yes right: : '
	buffer[1]+='text: No </o> </f>'

	redraw
	obj return
}

function dialog-return {
	set-buffer files
	redraw
}

function remove {
	dialog "${buffer[bf_d[line]]}" 'Trash?' remove-file
}
function remove-file {
	set-buffer files
	mv "${buffer[bf_d[line]]}" /tmp/trash/
	display-dir .
}

function pinned {
	set-buffer pinned
	redraw.cursor
}
function pinned-select {
	local item="${buffer[bf_d[line]]}"
	[ -d "$item" ] || return
	set-buffer files
	if [ "$item" != "$PWD" ]; then
		display-dir "$item"
	else
		redraw
	fi
}
function return-file {
	set-buffer files
	redraw
}

set-buffer pinned
length=14
for item in "${buffer[@]}"; do
	((length<${#item})) && length=${#item}
done
length=$((length+2))
bf_d[size-x]="$length"

stty -echo
on_die='cleanup'
function cleanup {
	stty echo
}

## layout manager
function change-size-screen {
	shopt -s checkwinsize && (:) # WHY THIS HAS TO BE HERE!!?
	
	set-buffer status
	bf_d[size-x]=$COLUMNS
#	redraw
	
	set-buffer files
	bf_d[size-y]=$((LINES-2))
	bf_d[loc-y]=2
	
	set-buffer pinned
	length=14
	for item in "${buffer[@]}"; do
		((length<${#item})) && length=${#item}
	done
	length=$((length+2))
	bf_d[size-x]=$((length-1))
	bf_d[size-y]=$((LINES-2))
	bf_d[loc-y]=2
	redraw
	
	set-buffer files
	((bf_d[loc-x]=length))
	((bf_d[size-x]=COLUMNS-length))
	
	set-buffer info
	bf_d[size-x]=$((COLUMNS/2))
	bf_d[size-y]=$((LINES-2))
	bf_d[loc-x]=$((COLUMNS/2))
	bf_d[loc-y]=2
					  
	set-buffer files
	redraw
}

[ -d /tmp/trash/ ] || mkdir /tmp/trash

load-default-config

init-var
change-size-screen
display-dir "${1:-.}"
input-loop

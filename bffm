#!/bin/bash
bffm_version="0.4.1"

source buffermaker
load-default-config
## Example of buffermaker tui program

file_faces=(
	dir "$(:weight bold :foreground blue)"
	exec "$(:weight bold :foreground green)"
	symlink "$(:weight bold :foreground cyan)"
	unreadable "$(:foreground gray)"
	char "$(:weight bold :background black :foreground yellow)"
	socket "$(:weight bold :foreground magenta)"

	image "$(:weight bold :foreground magenta)"
	video "$(:weight bold :foreground light-magenta)"
	audio "$(:foreground cyan)"
	archive "$(:weight bold :foreground )"
	text "$(:weight bold :foreground light-magenta)"
	
	info-line "$(:background gray)"
	info-line-title "$(:mode inverse :background black)"
	status-line "$(:underline t :weight bold)"
	file-focus "$(:mode inverse :foreground yellow)"
	file-select "$(:mode inverse :foreground light-yellow)"

	dialog "$(:mode inverse :foreground yellow)"

	link "$(:underline t :foreground yellow)"

)
load-theme file_faces

add-mode dialog
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: 'RET' link-enter
	:: 'C-c' 'die'
	mode-options
		:: else :
		:: disable-global 1

# dialog buffer
declare-buffer dialog
bf_d+=(		
	[line]=1
	[column]=0
	[mode]=dialog
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
	[size-y]=1
)

add-mode bffm
	:: '[up]' previous-line
	:: '[down]' next-line
	:: '[left]' dir-up
	:: '[right]' open
	:: 'RET' open
	:: '[next]' 'scroll-down'
	:: '[prior]' 'scroll-up'
	:: 'C-c' 'die'
	:: 'C-d' 'debug'
	
	:: 'C-n' 'filebf-next'
	:: 'C-p' 'filebf-prev'
	:: "$(kbd h)" toggle-hidden
	:: "$(kbd d)" remove
	:: "$(kbd a)" set-dir
	:: "$(kbd p)" pinned
	:: "$(kbd P)" pinned-hide
	:: "$(kbd i)" file-info
	mode-options
		:: else return
		:: disable-global 1

filebfs=()
filebf_count=0
function file-buffer-create {
	# file list buffer
	filebf_focused=$filebf_count
	declare-buffer "filebf_${filebf_focused}"
	bf_d+=(
		[line]=1
		[column]=0
		[mode]=bffm
		[syntax]=syntax-bffm
	)
	bf_h=(
		[pre-move]='print-buffer-line'
		[redraw.cursor pre-redraw]='redraw-info'
		[redraw.cursor post-redraw]='highlight-selected'
	)
	filebfs+=("filebf_${filebf_focused}")
	((filebf_count++))
}
function filebf-next {
	((filebf_focused+1<filebf_count))  && {
		((filebf_focused++))
		redraw-filebfs
	}
}
function filebf-prev {
	((filebf_focused>0)) && {
		((filebf_focused--))
		redraw-filebfs
	}
}

add-mode pinned
	:: '[up]' previous-line
	:: '[down]' next-line
	:: '[right]' return-file
	:: 'RET' pinned-select
	:: '[next]' 'scroll-down'
	:: '[prior]' 'scroll-up'
	:: "$(kbd p)" pinned-hide
	:: "$(kbd P)" pinned-hide
	:: 'C-c' 'die'
	mode-options
		:: else return
		:: disable-global 1
	
# pinned list buffer
declare-buffer pinned
bf_d+=(
	[line]=1
	[column]=0
	[mode]=pinned
	[syntax]=syntax-bffm
	[loc-x]=1
)

[ -f "${HOME}/.config/user-dirs.dirs" ] && source "${HOME}/.config/user-dirs.dirs"
buffer=(
	''
	'/'
	"$HOME"
	"$XDG_DESKTOP_DIR"
	"$XDG_DOCUMENTS_DIR"
	"$XDG_DOWNLOAD_DIR"
	"$XDG_MUSIC_DIR"
	"$XDG_PICTURES_DIR"
	"$XDG_TEMPLATES_DIR"
	"$XDG_VIDEOS_DIR"
	"/mnt"
	"/etc"
	"/usr"
	"/media"
)

buffer+=("MOUNTS")
findmnt -o TARGET --real --uniq --pairs | while read -r line; do
	eval "$line"
	buffer+=("$TARGET")
done

#findmnt -o TARGET --real --list --uniq | mapfile -O ${#buffer[@]} -t buffer


# status bar buffer
declare-buffer status
bf_d+=(
	[line]=1
	[column]=0
	[mode]=empty
	[syntax]=syntax-status
	[size-y]=1
	[loc-x]=1
	[loc-y]=1
)

buffer=(
	''
	"$PWD"
)

add-mode info
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: 'RET' link-enter
	:: "$(kbd n)" 'info-next'
	:: "$(kbd p)" 'info-previous'
	:: "$(kbd q)" 'info-quit'
	:: 'C-c' 'die'
	mode-options
		:: else :
		:: disable-global 1

# file info buffer
declare-buffer info
bf_d+=(
	[line]=1
	[column]=0
	[mode]=info
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)

add-mode debug
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: 'RET' link-enter
	:: 'C-c' die
	:: "$(kbd q)" debug-quit

# debug buffer
declare-buffer debug
bf_d+=(
	[line]=1
	[column]=0
	[mode]=info
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
	''
	'<link> debug-quit : Quit </link>'
	'<h> Debug info </h>'
	''
	'<-> <f> title Bffm </f>        <v> bffm_version'
	'<-> <f> title Buffermaker </f> <v> buffermaker_version'
	'<-> <f> title Bash </f>        <v> BASH_VERSION'
	''
	'<h> Variables </h>'
	''
	'<-> <ch> options[display-dotfiles] </ch> options[display-dotfiles] - Whether to display dotfiles'
	''
	'<h> Buffer </h> <a> menu bufferlist : <f> menu <v> selected_buffer </f> </a>'
	''
	'<-> <link> debug-bf-set set-linenum : set-linenum </link>'
	'<-> <link> debug-bf-set unset-linenum : unset-linenum </link>'
)
selected_buffer=debug

bufferlist=(
	text: Select buffer
		face: menu-highlight
		cmd: menu.exit
	text: dialog
		cmd: debug-select-buffer dialog
	text: files
		cmd: debug-select-buffer files
	text: pinned
		cmd: debug-select-buffer pinned
	text: status
		cmd: debug-select-buffer status
	text: info
		cmd: debug-select-buffer info
	text: debug
		cmd: debug-select-buffer debug
		face: menu-divider
	text: Close
		cmd: menu.exit
)
menu.add bufferlist
function debug-select-buffer {
	selected_buffer="$1"
	menu.exit
	make-render-line 12
	redraw
}
function debug-bf-set {
	set-buffer "$selected_buffer"
	"$1"
	set-buffer debug
	redraw
}

function debug-quit {
	change-size-screen
	display-dir
}
function debug {
	set-buffer debug
	redraw
}



function file-info {
	local file="${buffer[bf_d[line]]}"
	set-buffer info
	clear-buffer
	get-file-info "$file"
	redraw
	obj quit
}
function get-file-info {
	buffer=(
		''
'<o> id: next select: info-next up: : left: : right: obj previous text: <f> action <f> link N </f-> ext </f> </o> '\
'<o> id: previous select: info-previous up: : left: obj next right: obj quit text: <f> action <f> link P </f-> revious </f> </o> '\
'<o> id: quit select: info-quit up: : left: obj previous right: : text: <f> action <f> link Q </f-> uit </f> </o>'
		"<f> divider <lp> &line x/2-s/2 <f> title $1 </f> </lp> <> <lp> &line x/2-s[-2]/2 </lp> </f>"
		''
		"<-> $(file -b "$1")"
		''
		"size <f> title $(du -h -- "$1" | cut -f1) </f>"
	)
	[ -f "$file" ] &&
		buffer+=("lines <f> title $(wc -l < "$1") </f> words <f> title $(wc -w < "$1") </f> chars <f> title $(wc -m < "$1") </f>")
	buffer+=(
		"owner <f> title $(stat -c %U "$1") </f> (group <f> title $(stat -c %G "$1") <-f> default ) </f> </f>"
		"permissions <f> title $(stat -c %A "$1") </f>"
		''
		"created at $(stat -c %w "$1")"
		"last access at $(stat -c %x "$1")"
		"last modifiction $(stat -c %y "$1")"
		"last status change $(stat -c %z "$1")"
		''
		'<f> divider <lp> &line x </lp> </f>'
	)
	[ -b "$1" ] && buffer+=("<f> dim block special </f>")
	[ -c "$1" ] && buffer+=("<f> dim char special </f>")
	[ -e "$1" ] && buffer+=("<f> dim exists </f>")
	[ -d "$1" ] && buffer+=("<f> dim dir </f>")
	[ -f "$1" ] && buffer+=("<f> dim regular </f>")
	[ -g "$1" ] && buffer+=("<f> dim set-group-ID </f>")
	[ -G "$1" ] && buffer+=("<f> dim owner by effective group-ID </f>")
	[ -L "$1" ] && buffer+=("<f> dim symlink")
	[ -k "$1" ] && buffer+=("<f> dim sticky")
	[ -O "$1" ] && buffer+=("<f> dim owned by effective user-id </f>")
	[ -p "$1" ] && buffer+=("<f> dim named pipe </f>")
	[ -r "$1" ] && buffer+=("<f> dim read permission </f>")
	[ -s "$1" ] && buffer+=("<f> dim size greater 0 </f>")
	[ -S "$1" ] && buffer+=("<f> dim socket </f>")
	[ -u "$1" ] && buffer+=("<f> dim set-user-ID </f>")
	[ -w "$1" ] && buffer+=("<f> dim write permission granted </f>")
	[ -x "$1" ] && buffer+=("<f> dim execute/search granted </f>")
	
}
function info-next {
	set-buffer "filebf_${filebf_focused}"
	next-line
	file-info
}
function info-previous {
	set-buffer "filebf_${filebf_focused}"
	previous-line
	file-info
}
function info-quit {
	set-buffer "filebf_${filebf_focused}"
	redraw
}


function syntax-status {
	set-face status-line
}

function set-dir {
	local dir
	stty echo
	read-command ': ' dir "$PWD"
	stty -echo
	display-dir "$dir"
}

function init-dir {
	IFS=$'\n'
	clear-buffer
	cd "$1" || cd .
	set-buffer status
	buffer[1]="[${filebf_focused}] $PWD"
	unset bf_s[1]
 	redraw
	set-buffer "filebf_${filebf_focused}"
	bf_d[dir]="$PWD"
	mapfile -t -O 1 buffer <<< "$(list-directory)"
	[ -z "${buffer[bf_d[line]]}" ] && bf_d[line]=1
}
function focus-dir {
	cd "${bf_d[dir]}" || cd .
	set-buffer status
	buffer[1]="[${filebf_focused}] $PWD"
	unset bf_s[1]
 	redraw
	set-buffer "filebf_${filebf_focused}"
}

function display-dir {
	init-dir "$@"
	redraw
}

# stolen from fff
get-mime-type() {
	# Get a file's mime_type.
	mime_type=$(file "-${file_flags:-biL}" "$1" 2>/dev/null)
}
function open {
	file="${buffer[bf_d[line]]}"
	# Open directories and files.
	if [[ -d "$file" ]]; then
		display-dir "$file"; return;
	elif [[ -f "$file" ]]; then
		# Figure out what kind of file we're working with.
		get-mime-type "$file"

		# Open all text-based files in '$EDITOR'.
		# Everything else goes through 'xdg-open'/'open'.
		case "$mime_type" in
			text/*|*x-empty*|*json*)
				clear-screen
				stty echo
				"${VISUAL:-${EDITOR:-vi}}" "$file"
				stty -echo
				set-buffer status; redraw
				set-buffer pinned; redraw
				set-buffer "filebf_${filebf_focused}"; redraw
				;;

			*)
				# 'nohup':  Make the process immune to hangups.
				# '&':      Send it to the background.
				# 'disown': Detach it from the shell.
				nohup "${options[opener]:-${opener:-xdg-open}}" "$file" &>/dev/null &
				disown
		esac
	fi
}


function dir-up {
	display-dir ..
}

function toggle-hidden {
	((options[display-dotfiles]==0)) && options[display-dotfiles]=1 || options[display-dotfiles]=0
	display-dir
}

function highlight-selected {
	printf "%b%s" "${faces[file-focus]}" "${buffer[bf_d[line]]}"
	redraw-line.cursor
	printf '\e[?25l'
}

function redraw-info {
	local file="${buffer[bf_d[line]]}"
	local -i total=${#buffer[@]}
	local -i index=${bf_d[line]}
	local size
	[ -f "$file" ] && size="$(du -h -- "$file" | cut -f1)"
	[ -d "$file" ] && size="/($(cd "$file" 2> /dev/null && list-directory | wc -l))"

	# WHY THE FUCK DOES THIS ERROR WITH INVALID NUMBER IF PUT TOGETHER AS ONE PRINTF??????????????
	# no seriously whyyyyyy
	printf '\e[%d;%dH'\
		   $LINES\
		   0
	printf '%b%*s\r'\
		   "${faces[info-line]}"\
		   $COLUMNS\
		   ''
	printf '%s %b%s%b %s\e[m'\
		   "${index}/${total}"\
		   "${faces[info-line-title]}"\
		   "$file"\
		   "${faces[info-line]}"\
		   "$size"
}

function syntax-bffm {
	set-face default
	[ -x "$word" ] && set-face exec
	[ -d "$word" ] && set-face dir
	[ -L "$word" ] && set-face symlink
	[ -c "$word" ] && set-face char
	[ -S "$word" ] && set-face socket
	case "$word" in
		*'.png'|*'.jpg') set-face image;;
		*'.mp4'|*'.avi'|*.'mkv'|*'.m4v') set-face video;;
		*'.mp3'|*'.ogg'|*.'wav') set-face audio;;
		*'.zip'|*'.tar'|*'.rar') set-face archive;;
		*'.txt'|*'.md') set-face text;;
	esac
}

function dialog {
	((tmpx=bf_d[column] + bf_d[loc-x],
	  tmpy=bf_d[line] + bf_d[loc-y] - 1))
	set-buffer dialog
	clear-buffer
	((bf_d[loc-x]=tmpx,
	  bf_d[loc-y]=tmpy,
	  bf_d[size-x]=${#1} + ${#2} + 5 + 4,
	  bf_d[column]=0
	))
	
	buffer[0]=''
	buffer[1]="<f> file-select $1 </f> "
	buffer[1]+="<-f> dialog  $2 "
	buffer[1]+="<o> id: yes select: $3 up: : down: : left: obj no right: obj return "
	buffer[1]+='text: Yes </o> '
	buffer[1]+='<o> id: return select: dialog-return up: : down: : left: obj yes right: : '
	buffer[1]+='text: No </o> </f>'

	redraw
	obj return
}

function dialog-return {
	set-buffer "filebf_${filebf_focused}"
	redraw
}

function remove {
	dialog "${buffer[bf_d[line]]}" 'Trash?' remove-file
}
function remove-file {
	set-buffer "filebf_${filebf_focused}"
	mv "${buffer[bf_d[line]]}" /tmp/trash/
	display-dir .
}

function pinned {
	((show_pinned==0)) && {
		show_pinned=1
		change-size-screen
	}
	set-buffer pinned
	redraw.cursor
}
function pinned-hide {
	set-buffer "filebf_${filebf_focused}"
	show_pinned=0
	change-size-screen
}

function pinned-select {
	local item="${buffer[bf_d[line]]}"
	[ -d "$item" ] || return
	set-buffer "filebf_${filebf_focused}"
	if [ "$item" != "$PWD" ]; then
		display-dir "$item"
	else
		redraw
	fi
}
function return-file {
	set-buffer "filebf_${filebf_focused}"
	redraw
}

set-buffer pinned
length=14
for item in "${buffer[@]}"; do
	((length<${#item})) && length=${#item}
done
length=$((length+2))
bf_d[size-x]="$length"

stty -echo
hooks[die]='stty echo'

# file info buffer
declare-buffer separator
bf_d+=(
	[line]=1
	[column]=0
	[mode]=none
	[syntax]=syntax-none
	[render-type]=per-word
	[background]=info-line
)
buffer=(
	''
	''
)

## layout manager
# default variables
show_pinned=0

function redraw-filebfs {
	local -i split=$(( (bf_d[size-x]=COLUMNS-length) / ${#filebfs[@]}))
	local -i step=$((length+1))
	for bf in "${filebfs[@]}"; do
		set-buffer "${bf}"
		bf_d[size-y]=$((LINES-2))
		bf_d[loc-y]=2
		((bf_d[loc-x]=step))
		[ "$bf" = "filebf_${filebf_focused}" ] && ((status_loc=step))
		((bf_d[size-x]=split))
		((step+=split))
		
		[ "$bf" = "filebf_${filebf_focused}" ] && continue
		redraw
	done

	printf "\e[0m\e[0;${length}H%*s" $((LINES-length)) ''
	set-buffer status
	bf_d[size-x]=$((COLUMNS-status_loc))
	bf_d[loc-x]=$status_loc
	redraw
	
	set-buffer "filebf_${filebf_focused}"
	focus-dir
	redraw
}
function change-size-screen {
	shopt -s checkwinsize && (:) # WHY THIS HAS TO BE HERE!!?
	clear-screen
	length=0
	((show_pinned==1)) && {
		set-buffer pinned
		for item in "${buffer[@]}"; do
			((length<${#item})) && length=${#item}
		done
		length=$((length+2))
		bf_d[size-x]=$((length-1))
		bf_d[size-y]=$((LINES-1))
		bf_d[loc-y]=1
		redraw

		set-buffer separator
		bf_d[loc-x]=$length
		bf_d[size-x]=1
		bf_d[size-y]=$((LINES-1))
		bf_d[loc-y]=1
		redraw
	}
	
	set-buffer info
	bf_d[size-x]=$((COLUMNS/2))
	bf_d[size-y]=$((LINES-2))
	bf_d[loc-x]=$((COLUMNS/2))
	bf_d[loc-y]=2
	
	redraw-filebfs
}

[ -d /tmp/trash/ ] || mkdir /tmp/trash


init-var
file-buffer-create
file-buffer-create
filebf_focused=0
set-buffer "filebf_${filebf_focused}"
init-dir "${1:-.}"
filebf_focused=1
set-buffer "filebf_${filebf_focused}"
init-dir "${1:-.}"
change-size-screen
input-loop
